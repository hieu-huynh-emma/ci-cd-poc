{% if section.settings.show_announcement %}
  {% if section.settings.home_page_only == false or request.page_type == 'index' %}
    <style>
      .announcement-bar {
        background-color: {{section.settings.color_bg}};
      }

      .announcement-bar--link:hover {
        {% assign brightness=section.settings.color_bg | color_brightness %}
        {% if brightness <=192 %}
        {% assign lightenAmount=255 | minus: brightness | divided_by: 255 | times: 16 %}

        background-color: {{section.settings.color_bg | color_lighten: lightenAmount}};
        {% else %}
        {% assign darkenAmount=255 | divided_by: brightness | times: 8 %}

        background-color: {{section.settings.color_bg | color_darken: darkenAmount}};
        {% endif %}
      }

      .announcement-bar__message {
        color: {{section.settings.color_text}};
      }
    </style>

    {% if section.settings.link == blank %}
      <div class="announcement-bar">
    {% else %}
      <a href="{{ section.settings.link }}" class="announcement-bar announcement-bar--link">
    {% endif %}

    <p class="announcement-bar__message">{{ section.settings.text | escape }} <span id="timer-banner"></span></p>


    {% if section.settings.countdown-date != blank %}
      <script>

        // No magic numbers...

        var SECOND_ = 1000
        var MINUTE_ = 60 * SECOND_
        var HOUR_ = 60 * MINUTE_
        var DAY_ = 24 * HOUR_

        /**
         * Calculates the difference between two timestamps, returns a quadruple with
         * the difference in days, hours, minutes and seconds.
         *
         * @param {number} future
         */
        var timestampDiff_ =
          future =>
            /** @param {number} past */
              past =>
              [DAY_, HOUR_, MINUTE_, SECOND_].map((time, index, times) => {
                var diff = future - past
                var previousTime = times[index - 1]

                return (
                  Math.floor(diff / time) -
                  (Math.floor(diff / previousTime) * (previousTime / time) || 0)
                )
              })

        /**
         * Start timer and set the content of the element.
         *
         * @param {string} date
         */
        var timer_ =
          date =>
            /** @param {HTMLElement} target */
              target => {
              var diff = timestampDiff_(Date.parse(date))

              return setInterval(() => {
                var [days, hours, minutes, seconds] = diff(Date.now())

                // Ideally we should have targets for every element
                // to avoid updating the entire innerHTML of the container with
                // every tick.
                target.innerHTML = `
        
                                     ${days} days
                                     ${hours} hrs
                                     ${minutes} mins
                                     ${seconds} secs
        
                                    `
              }, SECOND_)
            }

        // We finally run it (and we save the interval return value if we wan to stop it later)
        var interval_ = timer_("{{ section.settings.countdown-date }}")(document.querySelector('#timer-banner'))

      </script>

    {% endif %}



    {% if section.settings.link == blank %}
      </div>
    {% else %}
      </a>
    {% endif %}

  {% endif %}
{% endif %}

{% schema %}
{
  "name": "Announcement Bar",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_announcement",
      "label": "Show announcement",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "home_page_only",
      "label": "Home page only",
      "default": true
    },
    {
      "type": "text",
      "id": "text",
      "label": "Text",
      "default": "Announce something here"
    },
    {
      "type": "text",
      "id": "countdown-date",
      "label": "Date",
      "info": "Format Sample: January 1, 2020 11:59:00 PM"
    },
    {
      "type": "url",
      "id": "link",
      "label": "Link"
    },
    {
      "type": "color",
      "id": "color_bg",
      "label": "Bar",
      "default": "#1c1d1d"
    },
    {
      "type": "color",
      "id": "color_text",
      "label": "Text",
      "default": "#ffffff"
    }
  ]
}
{% endschema %}
