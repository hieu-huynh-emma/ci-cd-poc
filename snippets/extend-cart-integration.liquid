<script>

    // run scripts on DOMContentLoaded to avoid affecting site load time
    window.addEventListener('DOMContentLoaded', function () {
        // Only run ajax integration if Extend and ExtendShopify is defined, and the currency is set to USD
        if (window.Extend && window.ExtendShopify && window.Shopify && window.Shopify.currency && window.Shopify.currency.active === 'USD' && window.location.pathname.includes('/cart')) {

            /*****************************************/
            /* Global Variables - THEME SPECIFIC     */
            /*****************************************/

            let cartRowItem = '.cart_list tr'; // This is the container element for each item in the cart
            let cartRowItemTitle = '.cart-item__name'; // This is the title anchor element for the product
            let cartRowItemImage = '.product_table_card a'; // This is the product image or image anchor element
            let cartRowItemQuantity = '.qty_item'; // This is the input element containing the product quantity
            let warrantyContainer = '.pd_name'; // This is the container where the offer will be appended
            let metadataContainer = '.pd_name'; // This is where warranty metadata will be appended (Product and Term)
            let offerClass = 'extend-cart-offer'; // This is the class that will be assigned to each Extend offer
            let titleReformat = false; // If warranty titles contain various extra characters, set this to true. Sets title to 'Extend Protection Plan'
            let localCart = {{ cart | json }}; // Shopify Cart Object on initial load
            const extendUtils = window.Extend.integration.utils;
            const extendLogger = extendUtils.logger;
            let regEx = /\d+$/;

            // QA Cypress variables
            window.Extend.integration.mainCartRowItem = cartRowItem;
            window.Extend.integration.mainCartRowItemTitle = cartRowItemTitle;
            window.Extend.integration.mainCartRowItemImage = cartRowItemImage;
            window.Extend.integration.mainCartRowItemQuantity = cartRowItemQuantity;
            window.Extend.integration.mainCartWarrantyContainer = warrantyContainer;
            window.Extend.integration.mainCartMetadataContainer = metadataContainer;
            window.Extend.integration.mainCartOffer = offerClass;


            // Fail safe for cart
            if (!localCart) {
                console.error("EXTEND: Exiting - localCart unavailable")
                return false;
            }

            /***********************/
            /* util functions      */
            /***********************/
            // findAll(element) - querySelectorAll to search for children in document OR a parentElement
            function findAll(elementToFind, parentElement) {
                const items = parentElement
                    ? parentElement.querySelectorAll(elementToFind)
                    : document.querySelectorAll(elementToFind);
                return items;
            }

            /**************************************/
            /* refreshCart - THEME SPECIFIC       */
            /**************************************/
            // Refresh the cart (hard refresh by default)
            function refreshCart() {
                location.href = location.hash
                    ? location.href.substring(0, location.href.indexOf('#'))
                    : location.href;
            }

            /***********************/
            /* createElement       */
            /***********************/
            // createElement(product) - Takes in the product element, and creates the Extend offer element + appends the offer
            function createElement(product, index) {
                try {
                    // Removes existing offer elements before creating new ones
                    let extendOffer = product.querySelector('.' + offerClass);
                    if (extendOffer)
                        extendOffer.remove();

                    // Grab URL from title anchor href
                    let url = product.querySelector(cartRowItemTitle).href;

                    // Grabs variant ID from URL if available, otherwise from localCart
                    let variantId = (url && url.match(regEx)) ? url.match(regEx)[0] : localCart.items[index].id;

                    if (!variantId) {
                        throw new Error("Exiting - variantId unavailable")
                    }

                    // Select quantity value
                    let quantity = product.querySelector(cartRowItemQuantity).value;

                    // Parent container to append ajax offer
                    let container = product.querySelector(warrantyContainer);

                    extendLogger({ url, variantId, quantity, container });

                    // Fail safes
                    if (!variantId || !quantity || !container) {
                        throw new Error("Exiting - variant, quantity or container unavailable");
                    }

                    // Create new element & set class, data-extend-variant, and data-extend-quantity attributes
                    let newExtendOffer = document.createElement('div');
                    newExtendOffer.className = offerClass;
                    newExtendOffer.setAttribute('data-extend-variant', variantId);
                    newExtendOffer.setAttribute('data-extend-quantity', quantity);

                    // Append the offer to the container element (THEME SPECIFIC)
                    container.append(newExtendOffer);
                } catch (error) {
                    console.error("EXTEND:", error);
                }
            }

            /************************/
            /* Handle Styling       */
            /************************/
            // Finds all cartRowItems and styles only Extend warranties
            function handleStyling() {
              let index = 0;
          
              findAll(cartRowItem).forEach(function (el) {
          
               // Grab the title of the current item
               let title = el.querySelector(cartRowItemTitle);
          
               // Title fail safe
               if (!title) return;
          
               // If it's a warranty set isExtend to true and remove links
               if (title.innerText.toLowerCase().indexOf('extend protection') > -1) {
          
                // Grab the image of the current item and fail safe
                let image = el.querySelector(cartRowItemImage);
                if (!image) return;
          
                // Select and remove pointerEvents from warranty image
                image.style.pointerEvents = 'none';
          
                // Select and remove pointerEvents from warranty title
                title.style.pointerEvents = 'none';
          
                if (titleReformat === true) {
                 title.innerText = 'Extend Protection Plan';
                };
          
                /**************************************/
                /* THEME SPECIFIC STYLING START */
                /**************************************/
          
                // Selects where to append warranty metadata
                let contentContainer = el.querySelector(metadataContainer)
                let warrantyProductData;
                let warrantyTermData;
          
                /**************************************/
                /* THEME SPECIFIC STYLING END */
                /**************************************/
          
               } else {
                // Create an offer element for each product
                createElement(el, index);
               }
          
                index += 1;
              });
        
            }

            /************************/
            /* initializeCartOffer  */
            /************************/
            // Invokes handleStyling and finds all offers in the cart, handling both normalization and balancing
            function initializeCartOffer() {
                // Handles styling and creates offer elements
                handleStyling();

                // Find all offer elements
                findAll('.' + offerClass).forEach(function (el) {

                    // Grab attributes out of element
                    let variantId = el.getAttribute('data-extend-variant');
                    let quantity = el.getAttribute('data-extend-quantity');

                    // Grabs the product category and price from the current item metadata
                    let productCategory;
                    let productPrice;
                    if (localCart.items.filter(item => item.id.toString() === variantId).length > 0) {
                        productCategory = localCart.items.filter(item => item.id.toString() === variantId)[0].product_type
                        productPrice = parseInt(localCart.items.filter(item => item.id.toString() === variantId)[0].price);
                    }

                    // If there's already a warranty in cart, return
                    if (ExtendShopify.warrantyAlreadyInCart(variantId, localCart.items)) {
                        return true;
                    } else {
                        // Render all other buttons
                        Extend.buttons.renderSimpleOffer(el, {
                            referenceId: variantId,
                            price: productPrice,
                            category: productCategory,
                            onAddToCart: function (options) {
                                ExtendShopify.addPlanToCart({
                                    plan: options.plan,
                                    product: options.product,
                                    quantity: quantity
                                }, function (err) {
                                    try {
                                        // An error occurred
                                        if (err) {
                                            throw new Error({ "Exiting - Error in onAddToCart": error });
                                        } else {
                                            refreshCart();
                                        }
                                    } catch (error) {
                                        console.error("EXTEND:", error)
                                    }
                                });
                            }
                        });
                    }
                })

                // Normalization ensures there is a 1:1 relationship between the product and the warranty
                ExtendShopify.normalizeCart({
                    cart: localCart,
                    balance: true
                }, function (err, data) {
                    try {
                        // An error occurred
                        if (err) {
                            throw new Error({ "Exiting - Error in normalizeCart": error });
                        } else if (data && data.updates) { // Calls refreshCart to update the cart for normalization
                            refreshCart();
                        } else {
                            extendLogger("no cart updates")
                        }
                    } catch (error) {
                        console.error("EXTEND:", error)
                    }
                });
            }

            // initializeCartOffer when script is initially rendered
            initializeCartOffer();

            window.addEventListener('refreshAjaxCart', function (e) {
                fetch('/cart.js', {
                    credentials: 'same-origin',
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then((e) => {
                        e.json()
                            .then((e) => {
                                if (window.Extend.integration.analytics)
                                    window.Extend.integration.cartAnalytics(localCart, e);

                                localCart = e;
                                initializeCartOffer();
                            })
                            .catch((error) => {
                                console.error("EXTEND:", error)
                            });
                    })
                    .catch((error) => {
                        console.error("EXTEND: Failed to fetch cart - ", error)
                    });
            });
        }
    });
</script>

<style>
    #extend-offers-modal-iframe {
        z-index: 99999999999 !important;
    }

    #extend-learn-more-modal-iframe {
        z-index: 99999999999 !important;
    }
</style>